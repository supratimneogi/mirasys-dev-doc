{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Face Recognition System (FRS) Management Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>The Face Recognition System (FRS) module provides comprehensive functionality for managing identity profiles within the Mirasys platform. This module handles CRUD operations for identity records including image processing, face embedding generation, and search capabilities.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The FRS management system is built with a client-server architecture:</p> <ul> <li>Frontend: React.js with Material-UI components</li> <li>Backend: Node.js Express server with MongoDB database</li> <li>Face Embedding: TensorFlow.js with MobileNet model for feature extraction</li> </ul>"},{"location":"#database-schema","title":"Database Schema","text":"<p>The FRS data is stored in MongoDB using the following schema:</p> <pre><code>const frsDetailsSchema = mongoose.Schema({\n    name: {\n        type: String,\n        required: true\n    },\n    address: {\n        type: String,\n        required: true\n    },\n    gender: {\n        type: String,\n        required: true\n    },\n    type: {\n        type: String,\n        required: true\n    },\n    image_name: {\n        type: String,\n        required: true\n    },\n    metadata: {\n        type: Object,\n        required: false\n    },\n    embedding: {\n        type: [String],\n        required: false\n    }\n}, { timestamps: true });\n</code></pre>"},{"location":"#backend-implementation","title":"Backend Implementation","text":""},{"location":"#api-endpoints","title":"API Endpoints","text":"Method Endpoint Description GET <code>/frs/uploaded/records</code> List all identity records with pagination and search GET <code>/frs/uploaded/record/:record_id</code> Get a specific identity record by ID POST <code>/frs/upload/single</code> Create a new identity with a single image POST <code>/frs/upload/multiple</code> Import multiple identities using a ZIP file PUT <code>/frs/uploaded/record/:record_id</code> Update an existing identity record DELETE <code>/frs/uploaded/record/:record_id</code> Delete an identity record GET <code>/frs/uploaded/search</code> Search identity records GET <code>/frs/uploaded/records/report</code> Get data for reports"},{"location":"#controller-implementation","title":"Controller Implementation","text":"<p>The FRS controller (<code>frsController.js</code>) contains the following key functionalities:</p> <ol> <li>Model Loading: Loads the MobileNet model for generating face embeddings</li> <li>Single Upload: Processes a single identity upload with image</li> <li>Bulk Import: Processes a ZIP file containing multiple identities and images</li> <li>Face Embedding: Generates feature embeddings for face recognition</li> <li>CRUD Operations: Standard operations for managing identity records</li> <li>Reporting: Data aggregation for reporting purposes</li> </ol>"},{"location":"#face-embedding-generation","title":"Face Embedding Generation","text":"<p>The system uses TensorFlow.js with a pre-trained MobileNet model to generate feature vectors (embeddings) from face images:</p> <pre><code>async embaddingImage(imagePath) {\n    const imageBuffer = await fsAsync.readFile(imagePath);\n    const imageTensor = tf.node.decodeImage(imageBuffer, 3)\n        .resizeNearestNeighbor([224, 224])\n        .toFloat()\n        .div(255.0)\n        .expandDims();\n\n    // Get embedding\n    const prediction = this.mobilenet.predict(imageTensor);\n    const embedding = await prediction.data();\n\n    return Array.from(embedding);\n}\n</code></pre>"},{"location":"#zip-file-processing","title":"ZIP File Processing","text":"<p>The system can process ZIP files containing multiple identity entries:</p> <ol> <li>Extracts the ZIP file</li> <li>Processes the CSV file containing identity metadata</li> <li>Processes each image file</li> <li>Generates embeddings for each face</li> <li>Creates records in the database</li> <li>Returns a summary of processed faces and any errors</li> </ol>"},{"location":"#frontend-implementation","title":"Frontend Implementation","text":""},{"location":"#components-hierarchy","title":"Components Hierarchy","text":"<ol> <li>IdentityList - Main component displaying the list of identities</li> <li>AddIdentityForm - Form for adding or editing identities</li> <li>ImportIdentityForm - Form for importing identities from a ZIP file</li> <li>ExportIdentityModal - Modal for exporting identities</li> <li>ImageSearchInputModal - Modal for searching identities by image</li> <li>IdentityDataTable - Table displaying identity records</li> </ol>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#identity-listing","title":"Identity Listing","text":"<p>The main interface displays all identities with pagination, sorting, and search capabilities. It allows viewing, adding, editing, and deleting identity records.</p>"},{"location":"#identity-importexport","title":"Identity Import/Export","text":"<ul> <li>Import: Users can upload a ZIP file containing a CSV with identity details and an images folder</li> <li>Export: Users can export identity data in PDF or Excel format with filtering options</li> </ul>"},{"location":"#identity-search","title":"Identity Search","text":"<p>Two search methods are available: 1. Text-based search: Uses the search field to filter records 2. Image-based search: Allows uploading an image to find matching identities</p>"},{"location":"#searching-identities","title":"Searching Identities","text":""},{"location":"#text-based-search","title":"Text-based Search","text":"<ol> <li>User enters search text in the search field</li> <li>System searches across name, type, gender, and address fields</li> <li>Results are filtered in real-time</li> </ol>"},{"location":"#image-based-search-frontend-only-not-currently-functional","title":"Image-based Search (Frontend Only - Not Currently Functional)","text":"<p>Note: This feature is currently only implemented in the frontend UI and is not yet functional.</p> <ol> <li>User clicks \"Search with image\" button</li> <li>ImageSearchInputModal appears</li> <li>User uploads an image</li> <li>The feature for backend processing, embedding generation, and comparison with stored embeddings is planned but not yet implemented</li> <li>Currently, no results will be returned from this search method</li> </ol>"},{"location":"#security-considerations","title":"Security Considerations","text":"<ul> <li>Authentication is required for all API routes</li> <li>File uploads are validated for appropriate file types and formats</li> <li>Error handling provides informative feedback without exposing system details</li> </ul>"},{"location":"#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Pagination is implemented to handle large numbers of records</li> <li>Image paths are stored rather than image data to reduce database size</li> <li>Face embedding generation is handled on the server side</li> </ul>"}]}